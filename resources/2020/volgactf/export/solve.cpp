#include "common.h"
#include "a5.h"
#include "cracker.h"
#include <ctime>

static void
test_data(void) {
	A5Key key;

	//key.fill_random();
	//key.print_bin();
	FrameInfo data[SOLUTION_FRAMES];
	data[0].frame_number = 0;
	data[0].reverse = 0;
	data[1].frame_number = data[0].frame_number + 4;
	data[1].reverse = 0;
	data[2].frame_number = data[0].frame_number + 8;
	data[2].reverse = 0;

	const u_char data0[48] = {0xac, 0x3e, 0x98, 0xe9, 0xb0, 0x58, 0x9a, 0x4f, 0x19, 0xde, 0xd8, 0x1d, 0xda, 0xe0, 0xd3, 0xfe, 0xf6, 0x13, 0x7e, 0x16, 0x10, 0x77, 0x49, 0x79, 0x55, 0x95, 0xd1, 0x36, 0xcc, 0xf2, 0x05, 0x59, 0x57, 0x6b, 0x50, 0x7d, 0xd0, 0x2c, 0xb5, 0x4f, 0x95, 0xe6, 0xe8, 0x56, 0xec, 0x99, 0xd3, 0x6a};
	const u_char data1[48] = {0x6e, 0x32, 0xdd, 0x22, 0x7d, 0x28, 0x31, 0x1c, 0x95, 0xd4, 0x98, 0x79, 0x13, 0xe5, 0x0e, 0xc1, 0xd5, 0x13, 0x53, 0x32, 0xf3, 0xdd, 0x10, 0x7e, 0x26, 0x59, 0x1f, 0x08, 0x77, 0x8d, 0x70, 0x68, 0xe0, 0xab, 0xe2, 0xb5, 0xe3, 0xf8, 0x42, 0x2e, 0xeb, 0xc5, 0x7a, 0xe3, 0x0d, 0x7c, 0xfc, 0x26};
	const u_char data2[48] = {0xb3, 0x9b, 0x01, 0xd9, 0xab, 0x4f, 0xee, 0x02, 0x77, 0xdf, 0x27, 0x74, 0xb9, 0x46, 0x79, 0x30, 0xcf, 0xab, 0x8a, 0x97, 0x53, 0x89, 0xc6, 0xb0, 0xb9, 0xa3, 0x00, 0x6f, 0x27, 0x08, 0xe1, 0x1f, 0xa3, 0xa8, 0x98, 0x9a, 0x75, 0x0e, 0xeb, 0xe4, 0x06, 0xf5, 0x09, 0x95, 0x03, 0x72, 0xe0, 0x3b};
	
	Facch3OutputBlock vec0(data0);
	Facch3OutputBlock vec1(data1);
	Facch3OutputBlock vec2(data2);
	Facch3OutputBlock testdata[3];
	testdata[0] = vec0;
	testdata[1] = vec1;
	testdata[2] = vec2;
	data[0].data = vec0;
	data[1].data = vec1;
	data[2].data = vec2;

	printf("frame %08x\n", data[0].frame_number);
	u_int R4v = lookup_R4_value(data[0].frame_number, testdata);
	printf("R4 %08x\n", R4v);
	u_int R1v, R2v, R3v;
	get_ini_values(data, R4v, R1v, R2v, R3v);

	A5Key recovered_key;
	recover_key(R1v, R2v, R3v, R4v, data[0].frame_number, recovered_key);
	printf("Key:\n", R4v);
	recovered_key.print_bin();
}

int
main(void) {
	crc_selftest();
	a5_selftest();
	test_data();
	return 0;
}
